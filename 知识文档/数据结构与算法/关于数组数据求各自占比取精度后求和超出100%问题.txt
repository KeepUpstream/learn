场景：现有一组数据，求各自所占总数的百分比。

问题：倘若除不尽的话需要取精度，那么就会存在最后百分比求和不等于100%的情况（为99.9%或100.01%）

解决方案一：
      对最后一个数据最修正，舍|入（100%与所求和的差值）。问题：对数据最后一个数据的偏差影响较大。

/**
 * @Description: 精度处理(如:%.2f表示保留后两位，它的处理方式也是直接截掉不要的尾数，不四舍五入)
 * @author 
 * @date 2018年09月04日 20:22:44
 * @param n 保留n位小数
 * @param d 原浮点数
 * @return 返回保留n位小数位数的字符串
 *
 */
public static String formatDoubleStr(int n,double d) {
   String str = String.format("%."+n+"f", d);
   return str;
}

/**
 * @Description: 获取组合数的百分比(各自占比和为100%)
 * @author 
 * @date 2018年09月20日 19:15:25
 * @param n 保留n位小数
 * @param doubleMap 除数
 * @param sum 被除数
 * @return
 *
 */
public static Map<String,Double> getPencentDoubleValue(int n, Map<String,Double> doubleMap, double sum) {
   //为空则返回null
   if(null==doubleMap||doubleMap.size()<0||sum==0){
      return null;
   }
   //截取的n+1尾数,用于判断四舍五入的精度问题
   Map<String,Double> allMap=new HashMap<>(doubleMap.size());
   Map<String,Double> maxMap=new HashMap<>(doubleMap.size());
   Map<String,Double> minMap=new HashMap<>(doubleMap.size());
   int di=0;
   String ds,dd,maxKey=null,minKey=null;
   double dv=0;
   for(String key : doubleMap.keySet()){
      ds=formatDoubleStr(n+1,doubleMap.get(key)/sum*100);
      dd=formatDoubleStr(n,doubleMap.get(key)/sum*100);
      di=Integer.valueOf(ds.substring(ds.length()-1,ds.length()));
      if(di>=5){
         maxMap.put(key,Double.valueOf(dd));
         maxKey=key;
      }else{
         minMap.put(key,Double.valueOf(dd));
         minKey=key;
      }
      dv+=Double.valueOf(dd);
      allMap.put(key,Double.valueOf(dd));
   }
 
   //计算和值,以决定增减
   if(dv>100&&maxMap.size()>0&&null!=maxKey){
      allMap.put(maxKey,Double.valueOf(formatDoubleStr(n,maxMap.get(maxKey)-(dv-100))));
   }else if(dv<100&&minMap.size()>0&&null!=minKey){
      allMap.put(minKey,Double.valueOf(formatDoubleStr(n,minMap.get(minKey)+(100-dv))));
   }
 
   return  allMap;
}

使用案例：

public static void main(String[] args) throws ParseException {
 
    Map<String,Double> percentMap =new HashMap<>(4);
    //double a=10.36,b=12.69,c=59.63,d=142.36;
    double a=0.01,b=25987.69,c=2588.63,d=14.36;
    percentMap.put("true",a);
    percentMap.put("arre",b);
    percentMap.put("lost",c);
    percentMap.put("coup",d);
    percentMap=getPencentDoubleValue(3,percentMap,a+b+c+d);
    System.out.println(a+b+c+d);
    System.out.println(percentMap.get("true"));
    System.out.println(percentMap.get("arre"));
    System.out.println(percentMap.get("lost"));
    System.out.println(percentMap.get("coup"));
}

解决方案二：
	数据保存为double类型，求两组值：
		直接计算值 = 各自数据 / 和 * power(10,precision) *100
		向下取整值 = Math.floor(直接计算值）
	再求一组余数值 = 直接计算 - 向下取整值
	
	按照向下取整值求和，可能会＜100，循环将余数值数组中的最大、较为大...的对应数据依次+1，直至求和为100%。
	
	这样，将不足的值相对均匀地分布在个数据上。

 @Test
    public void test1(){
        int[] arr = new int[]{3,3,3};
        for(int i = 0;i < arr.length; i++){
            System.out.println("值:"+getPercentValue(arr,9,i,2));
        }
 
    }
 
    /**
     * 数组
     * @param arr 数组
     * @param sum 总数
     * @param idx 索引
     * @param precision 精度
     * @return
     */
    public static double getPercentValue(int[] arr,double sum,int idx,int precision){
        if((arr.length-1) < idx){
            return 0;
        }
        //求和
        if(sum <= 0){
            for (int i = 0; i < arr.length; i++) {
                sum += arr[i];
            }
        }
        //10的2次幂是100，用于计算精度。
        double digits = Math.pow(10,precision);
        //扩大比例100
        double[] votesPerQuota = new double[arr.length];
        for(int i = 0; i < arr.length; i++){
            double val = arr[i] / sum * digits * 100;
            votesPerQuota[i] = val;
        }
        //总数,扩大比例意味的总数要扩大
        double targetSeats = digits * 100;
        //再向下取值，组成数组
        double[] seats = new double[arr.length];
        for(int i = 0; i < votesPerQuota.length; i++){
            seats[i] = Math.floor(votesPerQuota[i]);
        }
        //再新计算合计，用于判断与总数量是否相同,相同则占比会100%
        double currentSum = 0;
        for (int i = 0; i < seats.length; i++) {
            currentSum += seats[i];
        }
        //余数部分的数组:原先数组减去向下取值的数组,得到余数部分的数组
        double[] remainder = new double[arr.length];
        for(int i = 0; i < seats.length; i++){
            remainder[i] = votesPerQuota[i] - seats[i];
        }
        while(currentSum < targetSeats){
            double max = 0;
            int maxId = 0;
            int len = 0;
            for(int i = 0;i < remainder.length;++i){
                if(remainder[i] > max){
                    max = remainder[i];
                    maxId = i;
                }
            }
            //对最大项余额加1
            ++seats[maxId];
            //已经增加最大余数加1,则下次判断就可以不需要再判断这个余额数。
            remainder[maxId] = 0;
            //总的也要加1,为了判断是否总数是否相同,跳出循环。
            ++currentSum;
        }
        // 这时候的seats就会总数占比会100%
        return seats[idx] / digits;
    }
